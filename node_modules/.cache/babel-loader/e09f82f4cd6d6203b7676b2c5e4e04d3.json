{"ast":null,"code":"import _regeneratorRuntime from\"/home/waleed/Desktop/MintWebsites/Twisted-Bears/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/waleed/Desktop/MintWebsites/Twisted-Bears/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// constants\nimport Web3EthContract from\"web3-eth-contract\";import Web3 from\"web3\";import Web3Modal from\"web3modal\";import WalletConnectProvider from\"@walletconnect/web3-provider\";import WalletLink from\"walletlink\";// log\nimport{fetchData}from\"../data/dataActions\";var INFURA_ID=\"\";var providerOptions={walletconnect:{package:WalletConnectProvider,// required\noptions:{infuraId:INFURA_ID,// required\nrpc:{1:\"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"// Etherium C-Chain\n}}}};var connectRequest=function connectRequest(){return{type:\"CONNECTION_REQUEST\"};};var connectSuccess=function connectSuccess(payload){return{type:\"CONNECTION_SUCCESS\",payload:payload};};var connectFailed=function connectFailed(payload){return{type:\"CONNECTION_FAILED\",payload:payload};};var updateAccountRequest=function updateAccountRequest(payload){return{type:\"UPDATE_ACCOUNT\",payload:payload};};export var connect=function connect(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var abiResponse,abi,configResponse,CONFIG,_window,ethereum,metamaskIsInstalled,web3,accounts,networkId,SmartContractObj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(connectRequest());_context.next=3;return fetch(\"/config/abi.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 3:abiResponse=_context.sent;_context.next=6;return abiResponse.json();case 6:abi=_context.sent;_context.next=9;return fetch(\"/config/config.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 9:configResponse=_context.sent;_context.next=12;return configResponse.json();case 12:CONFIG=_context.sent;_window=window,ethereum=_window.ethereum;metamaskIsInstalled=ethereum&&ethereum.isMetaMask;if(!metamaskIsInstalled){_context.next=33;break;}Web3EthContract.setProvider(ethereum);web3=new Web3(ethereum);_context.prev=18;_context.next=21;return ethereum.request({method:\"eth_requestAccounts\"});case 21:accounts=_context.sent;_context.next=24;return ethereum.request({method:\"net_version\"});case 24:networkId=_context.sent;if(networkId==CONFIG.NETWORK.ID){SmartContractObj=new Web3EthContract(abi,CONFIG.CONTRACT_ADDRESS);dispatch(connectSuccess({account:accounts[0],smartContract:SmartContractObj,web3:web3}));// Add listeners start\nethereum.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});ethereum.on(\"chainChanged\",function(){window.location.reload();});// Add listeners end\n}else{dispatch(connectFailed(\"Change network to \".concat(CONFIG.NETWORK.NAME,\".\")));}_context.next=31;break;case 28:_context.prev=28;_context.t0=_context[\"catch\"](18);dispatch(connectFailed(\"Something went wrong.\"));case 31:_context.next=34;break;case 33:dispatch(connectFailed(\"Install Metamask.\"));case 34:case\"end\":return _context.stop();}}},_callee,null,[[18,28]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var connectWallet=function connectWallet(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var abiResponse,abi,configResponse,CONFIG,web3Modal,provider,web3,accounts,networkId,SmartContractObj;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(connectRequest());_context2.prev=1;_context2.next=4;return fetch(\"/config/abi.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 4:abiResponse=_context2.sent;_context2.next=7;return abiResponse.json();case 7:abi=_context2.sent;_context2.next=10;return fetch(\"/config/config.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 10:configResponse=_context2.sent;_context2.next=13;return configResponse.json();case 13:CONFIG=_context2.sent;localStorage.removeItem(\"walletconnect\");localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");web3Modal=new Web3Modal({network:\"mainnet\",// optional\ncacheProvider:false,// optional\nproviderOptions:providerOptions// required\n});_context2.next=19;return web3Modal.connect();case 19:provider=_context2.sent;web3=new Web3(provider);Web3EthContract.setProvider(provider);_context2.next=24;return web3.eth.getAccounts();case 24:accounts=_context2.sent;_context2.next=27;return provider.request({method:\"net_version\"});case 27:networkId=_context2.sent;if(networkId==CONFIG.NETWORK_ID_WALLET||networkId==CONFIG.NETWORK.ID){SmartContractObj=new Web3EthContract(abi,CONFIG.CONTRACT_ADDRESS);dispatch(connectSuccess({account:accounts[0],smartContract:SmartContractObj,web3:web3}));// Add listeners start\nprovider.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});provider.on(\"chainChanged\",function(){window.location.reload();});// Add listeners end\n}else{dispatch(connectFailed(\"Change network to \".concat(CONFIG.NETWORK.NAME,\".\")));}_context2.next=35;break;case 31:_context2.prev=31;_context2.t0=_context2[\"catch\"](1);console.log(\"error\",_context2.t0,\" message\",_context2.t0.message);if(typeof _context2.t0!==\"undefined\"&&typeof _context2.t0.message!==\"undefined\"&&_context2.t0.message.includes(\"User Rejected\")){dispatch(connectFailed(\"User rejected the request\"));}else if((typeof _context2.t0===\"string\"||_context2.t0 instanceof String)&&_context2.t0.includes(\"Modal closed by user\")){dispatch(connectFailed(\"Modal closed by user\"));}else{dispatch(connectFailed(\"Something went wrong.\"));}case 35:case\"end\":return _context2.stop();}}},_callee2,null,[[1,31]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var updateAccount=function updateAccount(account){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:dispatch(updateAccountRequest({account:account}));dispatch(fetchData(account));case 2:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};","map":{"version":3,"sources":["/home/waleed/Desktop/MintWebsites/Twisted-Bears/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","Web3Modal","WalletConnectProvider","WalletLink","fetchData","INFURA_ID","providerOptions","walletconnect","package","options","infuraId","rpc","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","fetch","headers","Accept","abiResponse","json","abi","configResponse","CONFIG","window","ethereum","metamaskIsInstalled","isMetaMask","setProvider","web3","request","method","accounts","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","location","reload","NAME","connectWallet","localStorage","removeItem","web3Modal","network","cacheProvider","provider","eth","getAccounts","NETWORK_ID_WALLET","console","log","message","includes","String"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\n\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst INFURA_ID = \"\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      infuraId: INFURA_ID, // required\n      rpc: {\n        1: \"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\", // Etherium C-Chain\n      },\n    },\n  },\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(\n            abi,\n            CONFIG.CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\n\nexport const connectWallet = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    try {\n      const abiResponse = await fetch(\"/config/abi.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const abi = await abiResponse.json();\n      const configResponse = await fetch(\"/config/config.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const CONFIG = await configResponse.json();\n      localStorage.removeItem(\"walletconnect\");\n      localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\", // optional\n        cacheProvider: false, // optional\n        providerOptions, // required\n      });\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n\n      Web3EthContract.setProvider(provider);\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await provider.request({\n        method: \"net_version\",\n      });\n      if (networkId == CONFIG.NETWORK_ID_WALLET || networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(\n          abi,\n          CONFIG.CONTRACT_ADDRESS\n        );\n        dispatch(\n          connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3,\n          })\n        );\n        // Add listeners start\n        provider.on(\"accountsChanged\", (accounts) => {\n          dispatch(updateAccount(accounts[0]));\n        });\n        provider.on(\"chainChanged\", () => {\n          window.location.reload();\n        });\n        // Add listeners end\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      console.log(\"error\", err, \" message\", err.message);\n      if (\n        typeof err !== \"undefined\" &&\n        typeof err.message !== \"undefined\" &&\n        err.message.includes(\"User Rejected\")\n      ) {\n        dispatch(connectFailed(\"User rejected the request\"));\n      } else if (\n        (typeof err === \"string\" || err instanceof String) &&\n        err.includes(\"Modal closed by user\")\n      ) {\n        dispatch(connectFailed(\"Modal closed by user\"));\n      } else {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}